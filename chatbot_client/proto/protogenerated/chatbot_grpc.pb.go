// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: protogenerated/chatbot.proto

package protogenerated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatboter_CheckHealth_FullMethodName = "/chatbot.Chatboter/CheckHealth"
	Chatboter_TrainModel_FullMethodName  = "/chatbot.Chatboter/TrainModel"
	Chatboter_GetResponse_FullMethodName = "/chatbot.Chatboter/GetResponse"
)

// ChatboterClient is the client API for Chatboter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type ChatboterClient interface {
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TrainModel(ctx context.Context, in *TrainModelRequest, opts ...grpc.CallOption) (*TrainModelResponse, error)
	GetResponse(ctx context.Context, in *GetResponseRequest, opts ...grpc.CallOption) (*GetResponseResponse, error)
}

type chatboterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatboterClient(cc grpc.ClientConnInterface) ChatboterClient {
	return &chatboterClient{cc}
}

func (c *chatboterClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Chatboter_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatboterClient) TrainModel(ctx context.Context, in *TrainModelRequest, opts ...grpc.CallOption) (*TrainModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainModelResponse)
	err := c.cc.Invoke(ctx, Chatboter_TrainModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatboterClient) GetResponse(ctx context.Context, in *GetResponseRequest, opts ...grpc.CallOption) (*GetResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponseResponse)
	err := c.cc.Invoke(ctx, Chatboter_GetResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatboterServer is the server API for Chatboter service.
// All implementations must embed UnimplementedChatboterServer
// for forward compatibility.
//
// The greeting service definition.
type ChatboterServer interface {
	CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TrainModel(context.Context, *TrainModelRequest) (*TrainModelResponse, error)
	GetResponse(context.Context, *GetResponseRequest) (*GetResponseResponse, error)
	mustEmbedUnimplementedChatboterServer()
}

// UnimplementedChatboterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatboterServer struct{}

func (UnimplementedChatboterServer) CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedChatboterServer) TrainModel(context.Context, *TrainModelRequest) (*TrainModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedChatboterServer) GetResponse(context.Context, *GetResponseRequest) (*GetResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponse not implemented")
}
func (UnimplementedChatboterServer) mustEmbedUnimplementedChatboterServer() {}
func (UnimplementedChatboterServer) testEmbeddedByValue()                   {}

// UnsafeChatboterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatboterServer will
// result in compilation errors.
type UnsafeChatboterServer interface {
	mustEmbedUnimplementedChatboterServer()
}

func RegisterChatboterServer(s grpc.ServiceRegistrar, srv ChatboterServer) {
	// If the following call pancis, it indicates UnimplementedChatboterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatboter_ServiceDesc, srv)
}

func _Chatboter_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatboterServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatboter_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatboterServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatboter_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatboterServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatboter_TrainModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatboterServer).TrainModel(ctx, req.(*TrainModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatboter_GetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatboterServer).GetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatboter_GetResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatboterServer).GetResponse(ctx, req.(*GetResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatboter_ServiceDesc is the grpc.ServiceDesc for Chatboter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatboter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatbot.Chatboter",
	HandlerType: (*ChatboterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _Chatboter_CheckHealth_Handler,
		},
		{
			MethodName: "TrainModel",
			Handler:    _Chatboter_TrainModel_Handler,
		},
		{
			MethodName: "GetResponse",
			Handler:    _Chatboter_GetResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protogenerated/chatbot.proto",
}
